{"expireTime":9007200867804449000,"key":"gatsby-plugin-mdx-entire-payload-6b4975f7877b785d5cf2f1f6024d4853-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import { CopyBlock, dracula } from \"react-code-blocks\";","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":56,"offset":55},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Detecting Fake news","position":{"start":{"line":3,"column":3,"offset":59},"end":{"line":3,"column":22,"offset":78},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":57},"end":{"line":3,"column":22,"offset":78},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Data has become the center of today’s’ businesses. In this modern world, 1.7 megaBytes data is generated per second. Many technologies have evolved to use this massive data for a better world. Machine learning is one of them and today we plan to use it to detect fake news. ","position":{"start":{"line":5,"column":1,"offset":80},"end":{"line":5,"column":275,"offset":354},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":80},"end":{"line":5,"column":275,"offset":354},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"fake.banner.png","alt":"fake news","position":{"start":{"line":7,"column":1,"offset":356},"end":{"line":7,"column":30,"offset":385},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":356},"end":{"line":7,"column":30,"offset":385},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What exactly is fake news?","position":{"start":{"line":9,"column":4,"offset":390},"end":{"line":9,"column":30,"offset":416},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":387},"end":{"line":9,"column":30,"offset":416},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fake news is pieces of misinformation that are often incorporated to mislead people. Fake news is easy to spread as it carries no verification evidence.  This is often done to further or impose certain ideas and is often achieved with political agendas.","position":{"start":{"line":11,"column":1,"offset":418},"end":{"line":11,"column":254,"offset":671},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":418},"end":{"line":11,"column":254,"offset":671},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"How do we plan to solve it?","position":{"start":{"line":13,"column":4,"offset":676},"end":{"line":13,"column":31,"offset":703},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":673},"end":{"line":13,"column":31,"offset":703},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This project is broken down into 5 steps, namely:","position":{"start":{"line":15,"column":1,"offset":705},"end":{"line":15,"column":50,"offset":754},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":705},"end":{"line":15,"column":50,"offset":754},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Loading the data","position":{"start":{"line":17,"column":4,"offset":759},"end":{"line":17,"column":20,"offset":775},"indent":[]}}],"position":{"start":{"line":17,"column":4,"offset":759},"end":{"line":17,"column":20,"offset":775},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":756},"end":{"line":17,"column":20,"offset":775},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Format the data","position":{"start":{"line":18,"column":4,"offset":779},"end":{"line":18,"column":19,"offset":794},"indent":[]}}],"position":{"start":{"line":18,"column":4,"offset":779},"end":{"line":18,"column":19,"offset":794},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":776},"end":{"line":18,"column":19,"offset":794},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Tokenize the data","position":{"start":{"line":19,"column":4,"offset":798},"end":{"line":19,"column":21,"offset":815},"indent":[]}}],"position":{"start":{"line":19,"column":4,"offset":798},"end":{"line":19,"column":21,"offset":815},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":795},"end":{"line":19,"column":21,"offset":815},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Build our model ","position":{"start":{"line":20,"column":4,"offset":819},"end":{"line":20,"column":20,"offset":835},"indent":[]}}],"position":{"start":{"line":20,"column":4,"offset":819},"end":{"line":20,"column":20,"offset":835},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":816},"end":{"line":20,"column":20,"offset":835},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Train multiple models","position":{"start":{"line":21,"column":4,"offset":839},"end":{"line":21,"column":25,"offset":860},"indent":[]}}],"position":{"start":{"line":21,"column":4,"offset":839},"end":{"line":21,"column":25,"offset":860},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":836},"end":{"line":21,"column":25,"offset":860},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":756},"end":{"line":21,"column":25,"offset":860},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let us get started on detecting the fake news!","position":{"start":{"line":23,"column":1,"offset":862},"end":{"line":23,"column":47,"offset":908},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":862},"end":{"line":23,"column":47,"offset":908},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Loading the Data","position":{"start":{"line":26,"column":5,"offset":915},"end":{"line":26,"column":21,"offset":931},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":911},"end":{"line":26,"column":21,"offset":931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I have used the “Fake or Real News Dataset” from Kaggle. < link here>.\nThe dataset comprises 2 csv files, namely fake and true. Both the files are available on kaggle for download. ","position":{"start":{"line":28,"column":1,"offset":933},"end":{"line":29,"column":111,"offset":1114},"indent":[1]}}],"position":{"start":{"line":28,"column":1,"offset":933},"end":{"line":29,"column":111,"offset":1114},"indent":[1]}},{"type":"jsx","value":"<br />\n<CopyBlock\nlanguage={\"python\"}\ntext={ ` df_fake = pd.read_csv('Fake.csv')\ndf_true = pd.read_csv('True.csv') `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":32,"column":1,"offset":1117},"end":{"line":40,"column":13,"offset":1304},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The initial step would be to merge both the files to have one single file for both train and testing. However, before merging we need to add labels to it. We consider 1 for True and 0 for False. We introduce a new column called ‘class’.","position":{"start":{"line":42,"column":1,"offset":1306},"end":{"line":42,"column":237,"offset":1542},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":1306},"end":{"line":42,"column":237,"offset":1542},"indent":[]}},{"type":"jsx","value":"<br />\n<CopyBlock\nlanguage={\"python\"}\ntext={ `df_fake['class'] = 0\ndf_true['class'] = 1  `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":44,"column":1,"offset":1544},"end":{"line":52,"column":13,"offset":1705},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After doing that, we simply merge both the files.","position":{"start":{"line":54,"column":1,"offset":1707},"end":{"line":54,"column":50,"offset":1756},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1707},"end":{"line":54,"column":50,"offset":1756},"indent":[]}},{"type":"jsx","value":"<br />\n<CopyBlock\nlanguage={\"python\"}\ntext={ `df_merge = pd.concat([df_fake, df_true], axis =0 ) `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":56,"column":1,"offset":1758},"end":{"line":63,"column":13,"offset":1927},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Format the data","position":{"start":{"line":66,"column":5,"offset":1934},"end":{"line":66,"column":20,"offset":1949},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":1930},"end":{"line":66,"column":20,"offset":1949},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Data preprocessing is a vital step to build a good model. Let us see the columns we have : ","position":{"start":{"line":68,"column":1,"offset":1951},"end":{"line":68,"column":92,"offset":2042},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":1951},"end":{"line":68,"column":92,"offset":2042},"indent":[]}},{"type":"jsx","value":"<br />\n<CopyBlock\nlanguage={\"python\"}\ntext={ `df_merge.columns `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":70,"column":1,"offset":2044},"end":{"line":77,"column":13,"offset":2179},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For simplicity, we remove the columns \"title\", \"subject\",\"date\" and retain the text and class column for further processing.","position":{"start":{"line":79,"column":1,"offset":2181},"end":{"line":79,"column":125,"offset":2305},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":2181},"end":{"line":79,"column":125,"offset":2305},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `df = df_merge.drop([\"title\", \"subject\",\"date\"], axis = 1) `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":81,"column":1,"offset":2307},"end":{"line":87,"column":13,"offset":2476},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next we check for any null values,","position":{"start":{"line":89,"column":1,"offset":2478},"end":{"line":89,"column":35,"offset":2512},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2478},"end":{"line":89,"column":35,"offset":2512},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `df.isnull().sum() `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":91,"column":1,"offset":2514},"end":{"line":97,"column":13,"offset":2643},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Great, we have no null values. Now let us replace the index column and have a cleaner dataset.","position":{"start":{"line":100,"column":1,"offset":2646},"end":{"line":100,"column":95,"offset":2740},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":2646},"end":{"line":100,"column":95,"offset":2740},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `df.reset_index(inplace = True)\ndf.drop([\"index\"], axis = 1, inplace = True)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":103,"column":1,"offset":2743},"end":{"line":110,"column":13,"offset":2929},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I have defined a function wordopt below that performs basic regex operations on the text columns and modifies text on the following parameters:","position":{"start":{"line":113,"column":1,"offset":2932},"end":{"line":113,"column":144,"offset":3075},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2932},"end":{"line":113,"column":144,"offset":3075},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Removes URLs and website links.","position":{"start":{"line":116,"column":4,"offset":3081},"end":{"line":116,"column":35,"offset":3112},"indent":[]}}],"position":{"start":{"line":116,"column":4,"offset":3081},"end":{"line":116,"column":35,"offset":3112},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3078},"end":{"line":116,"column":35,"offset":3112},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Removes unwanted spacings.","position":{"start":{"line":117,"column":4,"offset":3116},"end":{"line":117,"column":30,"offset":3142},"indent":[]}}],"position":{"start":{"line":117,"column":4,"offset":3116},"end":{"line":117,"column":30,"offset":3142},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3113},"end":{"line":117,"column":30,"offset":3142},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Replaces punctuations with a single space.","position":{"start":{"line":118,"column":4,"offset":3146},"end":{"line":118,"column":46,"offset":3188},"indent":[]}}],"position":{"start":{"line":118,"column":4,"offset":3146},"end":{"line":118,"column":46,"offset":3188},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":3143},"end":{"line":118,"column":46,"offset":3188},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Removes line spacings.","position":{"start":{"line":119,"column":4,"offset":3192},"end":{"line":119,"column":26,"offset":3214},"indent":[]}}],"position":{"start":{"line":119,"column":4,"offset":3192},"end":{"line":119,"column":26,"offset":3214},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":3189},"end":{"line":119,"column":26,"offset":3214},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Converts words in its lowercase.","position":{"start":{"line":120,"column":4,"offset":3218},"end":{"line":120,"column":36,"offset":3250},"indent":[]}}],"position":{"start":{"line":120,"column":4,"offset":3218},"end":{"line":120,"column":36,"offset":3250},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":3215},"end":{"line":120,"column":36,"offset":3250},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":3078},"end":{"line":120,"column":36,"offset":3250},"indent":[1,1,1,1]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `def wordopt(text):\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(\"\\\\W\",\" \",text) \n    text = re.sub('https?://\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)    \n    return text `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":124,"column":1,"offset":3254},"end":{"line":139,"column":13,"offset":3736},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This function is then applied to our text column, ","position":{"start":{"line":142,"column":1,"offset":3739},"end":{"line":142,"column":51,"offset":3789},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":3739},"end":{"line":142,"column":51,"offset":3789},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `df[\"text\"] = df[\"text\"].apply(wordopt)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":144,"column":1,"offset":3791},"end":{"line":150,"column":13,"offset":3940},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Before performing tokenization, we have one final step to do. Split the dataset into test and train. We consider having a 70 - 30 split.","position":{"start":{"line":152,"column":1,"offset":3942},"end":{"line":152,"column":137,"offset":4078},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":3942},"end":{"line":152,"column":137,"offset":4078},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `x = df['text']\ny = df['class']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3) `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":155,"column":1,"offset":4081},"end":{"line":163,"column":13,"offset":4296},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Tokenize the data","position":{"start":{"line":166,"column":5,"offset":4303},"end":{"line":166,"column":22,"offset":4320},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":4299},"end":{"line":166,"column":22,"offset":4320},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We use TF IDF to convert the text input into vectors. The explanation of TF IDF is out of scope for this blog, however, you may refer to get a deeper understanding. We use sklearn library to perform the steps.","position":{"start":{"line":168,"column":1,"offset":4322},"end":{"line":168,"column":210,"offset":4531},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4322},"end":{"line":168,"column":210,"offset":4531},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `from sklearn.feature_extraction.text import TfidfVectorizer\n \nvectorization = TfidfVectorizer()\nxv_train = vectorization.fit_transform(x_train)\nxv_test = vectorization.transform(x_test) `}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":170,"column":1,"offset":4533},"end":{"line":180,"column":13,"offset":4830},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now, that we have the tokenized data, let’s build our first model.","position":{"start":{"line":183,"column":1,"offset":4833},"end":{"line":183,"column":67,"offset":4899},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4833},"end":{"line":183,"column":67,"offset":4899},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Building the Model","position":{"start":{"line":185,"column":5,"offset":4905},"end":{"line":185,"column":23,"offset":4923},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":4901},"end":{"line":185,"column":23,"offset":4923},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We plan to build 4 different models and then compare them to choose the best one.","position":{"start":{"line":187,"column":1,"offset":4925},"end":{"line":187,"column":82,"offset":5006},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":4925},"end":{"line":187,"column":82,"offset":5006},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"1. Logistic Regression","position":{"start":{"line":189,"column":6,"offset":5013},"end":{"line":189,"column":28,"offset":5035},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":5008},"end":{"line":189,"column":28,"offset":5035},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `from sklearn.linear_model import LogisticRegression\n \nLR = LogisticRegression()\nLR.fit(xv_train,y_train)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":191,"column":1,"offset":5037},"end":{"line":200,"column":13,"offset":5252},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Currently, we use the predefined model parameters. ","position":{"start":{"line":202,"column":1,"offset":5254},"end":{"line":202,"column":52,"offset":5305},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":5254},"end":{"line":202,"column":52,"offset":5305},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `pred_lr=LR.predict(xv_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":204,"column":1,"offset":5307},"end":{"line":210,"column":13,"offset":5445},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Further on, we now try to find the score.","position":{"start":{"line":212,"column":1,"offset":5447},"end":{"line":212,"column":42,"offset":5488},"indent":[]}}],"position":{"start":{"line":212,"column":1,"offset":5447},"end":{"line":212,"column":42,"offset":5488},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `LR.score(xv_test, y_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":214,"column":1,"offset":5490},"end":{"line":220,"column":13,"offset":5626},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Lastly, let us take a look at the classification report:","position":{"start":{"line":222,"column":1,"offset":5628},"end":{"line":222,"column":57,"offset":5684},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":5628},"end":{"line":222,"column":57,"offset":5684},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `print(classification_report(y_test,pred_lr))`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":224,"column":1,"offset":5686},"end":{"line":230,"column":13,"offset":5841},"indent":[1,1,1,1,1,1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":232,"column":1,"offset":5843},"end":{"line":232,"column":7,"offset":5849},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"2. Decision Tree","position":{"start":{"line":234,"column":6,"offset":5856},"end":{"line":234,"column":22,"offset":5872},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":5851},"end":{"line":234,"column":22,"offset":5872},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Performing similar modeling steps as above,","position":{"start":{"line":236,"column":1,"offset":5874},"end":{"line":236,"column":44,"offset":5917},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":5874},"end":{"line":236,"column":44,"offset":5917},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `from sklearn.tree import DecisionTreeClassifier\n \nDT = DecisionTreeClassifier()\nDT.fit(xv_train, y_train)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":238,"column":1,"offset":5919},"end":{"line":247,"column":13,"offset":6135},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":249,"column":1,"offset":6137},"end":{"line":249,"column":7,"offset":6143},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `pred_dt = DT.predict(xv_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />\n \n<br />","position":{"start":{"line":251,"column":1,"offset":6145},"end":{"line":259,"column":7,"offset":6294},"indent":[1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `DT.score(xv_test, y_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":261,"column":1,"offset":6296},"end":{"line":267,"column":13,"offset":6432},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We already see a slight improvement over Random Forest. The classification report of Decision tree is shown below:","position":{"start":{"line":269,"column":1,"offset":6434},"end":{"line":269,"column":115,"offset":6548},"indent":[]}}],"position":{"start":{"line":269,"column":1,"offset":6434},"end":{"line":269,"column":115,"offset":6548},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `print(classification_report(y_test, pred_dt))`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />\n<br />","position":{"start":{"line":271,"column":1,"offset":6550},"end":{"line":278,"column":7,"offset":6713},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"3. Gradient boosting classifier","position":{"start":{"line":280,"column":6,"offset":6720},"end":{"line":280,"column":37,"offset":6751},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":6715},"end":{"line":280,"column":37,"offset":6751},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":282,"column":1,"offset":6753},"end":{"line":282,"column":7,"offset":6759},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `from sklearn.ensemble import GradientBoostingClassifier\n \nGBC = GradientBoostingClassifier(random_state=0)\nGBC.fit(xv_train, y_train)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":284,"column":1,"offset":6761},"end":{"line":293,"column":13,"offset":7005},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":295,"column":1,"offset":7007},"end":{"line":295,"column":7,"offset":7013},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `pred_gbc = GBC.predict(xv_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":297,"column":1,"offset":7015},"end":{"line":303,"column":13,"offset":7157},"indent":[1,1,1,1,1,1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":305,"column":1,"offset":7159},"end":{"line":305,"column":7,"offset":7165},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `GBC.score(xv_test, y_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":307,"column":1,"offset":7167},"end":{"line":313,"column":13,"offset":7304},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The score of the gradient boosting classifier is similar to that of the decision tree. Let us look at the classification report to find more:","position":{"start":{"line":315,"column":1,"offset":7306},"end":{"line":315,"column":142,"offset":7447},"indent":[]}}],"position":{"start":{"line":315,"column":1,"offset":7306},"end":{"line":315,"column":142,"offset":7447},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `print(classification_report(y_test, pred_gbc))`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />\n \n<br />","position":{"start":{"line":318,"column":1,"offset":7450},"end":{"line":326,"column":7,"offset":7616},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"4. Random Forest","position":{"start":{"line":328,"column":6,"offset":7623},"end":{"line":328,"column":22,"offset":7639},"indent":[]}}],"position":{"start":{"line":328,"column":1,"offset":7618},"end":{"line":328,"column":22,"offset":7639},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":330,"column":1,"offset":7641},"end":{"line":330,"column":7,"offset":7647},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `from sklearn.ensemble import RandomForestClassifier\n \nRFC = RandomForestClassifier(random_state=0)\nRFC.fit(xv_train, y_train)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":332,"column":1,"offset":7649},"end":{"line":341,"column":13,"offset":7885},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":343,"column":1,"offset":7887},"end":{"line":343,"column":7,"offset":7893},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `pred_rfc = RFC.predict(xv_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":345,"column":1,"offset":7895},"end":{"line":351,"column":13,"offset":8037},"indent":[1,1,1,1,1,1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":353,"column":1,"offset":8039},"end":{"line":353,"column":7,"offset":8045},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `RFC.score(xv_test, y_test)`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":355,"column":1,"offset":8047},"end":{"line":361,"column":13,"offset":8184},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As noticed, Random forest outperforms all the above models. Checking the classification report below:","position":{"start":{"line":363,"column":1,"offset":8186},"end":{"line":363,"column":102,"offset":8287},"indent":[]}}],"position":{"start":{"line":363,"column":1,"offset":8186},"end":{"line":363,"column":102,"offset":8287},"indent":[]}},{"type":"jsx","value":"<CopyBlock\nlanguage={\"python\"}\ntext={ `print(classification_report(y_test, pred_rfc))`}\nshowLineNumbers={false}\ntheme={dracula}\nwrapLines={true}\ncodeBlock />","position":{"start":{"line":366,"column":1,"offset":8290},"end":{"line":372,"column":13,"offset":8447},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that we have trained different models, we can use them for evaluation on unseen or new data. You can find the complete code on the notebook here: ","position":{"start":{"line":375,"column":1,"offset":8450},"end":{"line":375,"column":151,"offset":8600},"indent":[]}}],"position":{"start":{"line":375,"column":1,"offset":8450},"end":{"line":375,"column":151,"offset":8600},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Please note the models can be further improved by changing their hyperparameters. You can also experiment with considering both the titles and text for detecting fake news. The possibilities are endless. ","position":{"start":{"line":377,"column":1,"offset":8602},"end":{"line":377,"column":205,"offset":8806},"indent":[]}}],"position":{"start":{"line":377,"column":1,"offset":8602},"end":{"line":377,"column":205,"offset":8806},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I hope this notebook was of help. Do let me know if you have any questions or used different methods to train your model. ","position":{"start":{"line":380,"column":1,"offset":8809},"end":{"line":380,"column":123,"offset":8931},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":8809},"end":{"line":380,"column":123,"offset":8931},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"the ","position":{"start":{"line":383,"column":1,"offset":8934},"end":{"line":383,"column":5,"offset":8938},"indent":[]}},{"type":"link","title":null,"url":"http://p.amxe.net/yh7n10br--ek1b5bf7-xrn","children":[{"type":"text","value":"repository","position":{"start":{"line":383,"column":6,"offset":8939},"end":{"line":383,"column":16,"offset":8949},"indent":[]}}],"position":{"start":{"line":383,"column":5,"offset":8938},"end":{"line":383,"column":59,"offset":8992},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":383,"column":59,"offset":8992},"end":{"line":383,"column":60,"offset":8993},"indent":[]}}],"position":{"start":{"line":383,"column":1,"offset":8934},"end":{"line":383,"column":60,"offset":8993},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Using NLP to detect Fake news!\",\"date\":\"2020-08-02T00:00:00.000Z\",\"info\":\"Develop a machine learning model to identify when an article might be fake news.\"}","position":{"start":{"line":388,"column":1,"offset":8998},"end":{"line":388,"column":195,"offset":9192},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":388,"column":195,"offset":9192}}},"scopeImports":["import { CopyBlock, dracula } from \"react-code-blocks\";","import * as React from 'react'"],"scopeIdentifiers":["CopyBlock","dracula","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using NLP to detect Fake news!\",\n  \"date\": \"2020-08-02T00:00:00.000Z\",\n  \"info\": \"Develop a machine learning model to identify when an article might be fake news.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"detecting-fake-news\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"#detecting-fake-news\",\n    \"aria-label\": \"detecting fake news permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Detecting Fake news\"), mdx(\"p\", null, \"Data has become the center of today\\u2019s\\u2019 businesses. In this modern world, 1.7 megaBytes data is generated per second. Many technologies have evolved to use this massive data for a better world. Machine learning is one of them and today we plan to use it to detect fake news. \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"fake.banner.png\",\n    \"alt\": \"fake news\"\n  })), mdx(\"h2\", {\n    \"id\": \"what-exactly-is-fake-news\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#what-exactly-is-fake-news\",\n    \"aria-label\": \"what exactly is fake news permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"What exactly is fake news?\"), mdx(\"p\", null, \"Fake news is pieces of misinformation that are often incorporated to mislead people. Fake news is easy to spread as it carries no verification evidence.  This is often done to further or impose certain ideas and is often achieved with political agendas.\"), mdx(\"h2\", {\n    \"id\": \"how-do-we-plan-to-solve-it\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-do-we-plan-to-solve-it\",\n    \"aria-label\": \"how do we plan to solve it permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"How do we plan to solve it?\"), mdx(\"p\", null, \"This project is broken down into 5 steps, namely:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Loading the data\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Format the data\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tokenize the data\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Build our model \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Train multiple models\")), mdx(\"p\", null, \"Let us get started on detecting the fake news!\"), mdx(\"h3\", {\n    \"id\": \"loading-the-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#loading-the-data\",\n    \"aria-label\": \"loading the data permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Loading the Data\"), mdx(\"p\", null, \"I have used the \\u201CFake or Real News Dataset\\u201D from Kaggle. < link here>.\\nThe dataset comprises 2 csv files, namely fake and true. Both the files are available on kaggle for download. \"), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \" df_fake = pd.read_csv('Fake.csv')\\ndf_true = pd.read_csv('True.csv') \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"The initial step would be to merge both the files to have one single file for both train and testing. However, before merging we need to add labels to it. We consider 1 for True and 0 for False. We introduce a new column called \\u2018class\\u2019.\"), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df_fake['class'] = 0\\ndf_true['class'] = 1  \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"After doing that, we simply merge both the files.\"), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df_merge = pd.concat([df_fake, df_true], axis =0 ) \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"h3\", {\n    \"id\": \"format-the-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#format-the-data\",\n    \"aria-label\": \"format the data permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Format the data\"), mdx(\"p\", null, \"Data preprocessing is a vital step to build a good model. Let us see the columns we have : \"), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df_merge.columns \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"For simplicity, we remove the columns \\u201Ctitle\\u201D, \\u201Csubject\\u201D,\\u201Cdate\\u201D and retain the text and class column for further processing.\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df = df_merge.drop([\\\"title\\\", \\\"subject\\\",\\\"date\\\"], axis = 1) \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Next we check for any null values,\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df.isnull().sum() \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Great, we have no null values. Now let us replace the index column and have a cleaner dataset.\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df.reset_index(inplace = True)\\ndf.drop([\\\"index\\\"], axis = 1, inplace = True)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"I have defined a function wordopt below that performs basic regex operations on the text columns and modifies text on the following parameters:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Removes URLs and website links.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Removes unwanted spacings.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Replaces punctuations with a single space.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Removes line spacings.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Converts words in its lowercase.\")), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"def wordopt(text):\\n    text = text.lower()\\n    text = re.sub('[.*?]', '', text)\\n    text = re.sub(\\\"\\\\W\\\",\\\" \\\",text) \\n    text = re.sub('https?://S+|www.S+', '', text)\\n    text = re.sub('<.*?>+', '', text)\\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\\n    text = re.sub('\\\\n', '', text)\\n    text = re.sub('w*dw*', '', text)    \\n    return text \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"This function is then applied to our text column, \"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"df[\\\"text\\\"] = df[\\\"text\\\"].apply(wordopt)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Before performing tokenization, we have one final step to do. Split the dataset into test and train. We consider having a 70 - 30 split.\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"x = df['text']\\ny = df['class']\\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3) \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"h3\", {\n    \"id\": \"tokenize-the-data\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#tokenize-the-data\",\n    \"aria-label\": \"tokenize the data permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Tokenize the data\"), mdx(\"p\", null, \"We use TF IDF to convert the text input into vectors. The explanation of TF IDF is out of scope for this blog, however, you may refer to get a deeper understanding. We use sklearn library to perform the steps.\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"from sklearn.feature_extraction.text import TfidfVectorizer\\n \\nvectorization = TfidfVectorizer()\\nxv_train = vectorization.fit_transform(x_train)\\nxv_test = vectorization.transform(x_test) \",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Now, that we have the tokenized data, let\\u2019s build our first model.\"), mdx(\"h3\", {\n    \"id\": \"building-the-model\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#building-the-model\",\n    \"aria-label\": \"building the model permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Building the Model\"), mdx(\"p\", null, \"We plan to build 4 different models and then compare them to choose the best one.\"), mdx(\"h4\", {\n    \"id\": \"1-logistic-regression\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#1-logistic-regression\",\n    \"aria-label\": \"1 logistic regression permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"1. Logistic Regression\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"from sklearn.linear_model import LogisticRegression\\n \\nLR = LogisticRegression()\\nLR.fit(xv_train,y_train)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Currently, we use the predefined model parameters. \"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"pred_lr=LR.predict(xv_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Further on, we now try to find the score.\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"LR.score(xv_test, y_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Lastly, let us take a look at the classification report:\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"print(classification_report(y_test,pred_lr))\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"2-decision-tree\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#2-decision-tree\",\n    \"aria-label\": \"2 decision tree permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"2. Decision Tree\"), mdx(\"p\", null, \"Performing similar modeling steps as above,\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"from sklearn.tree import DecisionTreeClassifier\\n \\nDT = DecisionTreeClassifier()\\nDT.fit(xv_train, y_train)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"pred_dt = DT.predict(xv_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"DT.score(xv_test, y_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"We already see a slight improvement over Random Forest. The classification report of Decision tree is shown below:\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"print(classification_report(y_test, pred_dt))\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"3-gradient-boosting-classifier\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#3-gradient-boosting-classifier\",\n    \"aria-label\": \"3 gradient boosting classifier permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"3. Gradient boosting classifier\"), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"from sklearn.ensemble import GradientBoostingClassifier\\n \\nGBC = GradientBoostingClassifier(random_state=0)\\nGBC.fit(xv_train, y_train)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"pred_gbc = GBC.predict(xv_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"GBC.score(xv_test, y_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"The score of the gradient boosting classifier is similar to that of the decision tree. Let us look at the classification report to find more:\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"print(classification_report(y_test, pred_gbc))\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"4-random-forest\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#4-random-forest\",\n    \"aria-label\": \"4 random forest permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"4. Random Forest\"), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"from sklearn.ensemble import RandomForestClassifier\\n \\nRFC = RandomForestClassifier(random_state=0)\\nRFC.fit(xv_train, y_train)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"pred_rfc = RFC.predict(xv_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"br\", null), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"RFC.score(xv_test, y_test)\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"As noticed, Random forest outperforms all the above models. Checking the classification report below:\"), mdx(CopyBlock, {\n    language: \"python\",\n    text: \"print(classification_report(y_test, pred_rfc))\",\n    showLineNumbers: false,\n    theme: dracula,\n    wrapLines: true,\n    codeBlock: true,\n    mdxType: \"CopyBlock\"\n  }), mdx(\"p\", null, \"Now that we have trained different models, we can use them for evaluation on unseen or new data. You can find the complete code on the notebook here: \"), mdx(\"p\", null, \"Please note the models can be further improved by changing their hyperparameters. You can also experiment with considering both the titles and text for detecting fake news. The possibilities are endless. \"), mdx(\"p\", null, \"I hope this notebook was of help. Do let me know if you have any questions or used different methods to train your model. \"), mdx(\"p\", null, \"the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://p.amxe.net/yh7n10br--ek1b5bf7-xrn\"\n  }, \"repository\"), \" \"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { CopyBlock, dracula } from \"react-code-blocks\";\nexport const _frontmatter = {\n  \"title\": \"Using NLP to detect Fake news!\",\n  \"date\": \"2020-08-02T00:00:00.000Z\",\n  \"info\": \"Develop a machine learning model to identify when an article might be fake news.\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"detecting-fake-news\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h1\" {...{\n        \"href\": \"#detecting-fake-news\",\n        \"aria-label\": \"detecting fake news permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Detecting Fake news`}</h1>\n    <p>{`Data has become the center of today’s’ businesses. In this modern world, 1.7 megaBytes data is generated per second. Many technologies have evolved to use this massive data for a better world. Machine learning is one of them and today we plan to use it to detect fake news. `}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"fake.banner.png\",\n        \"alt\": \"fake news\"\n      }}></img></p>\n    <h2 {...{\n      \"id\": \"what-exactly-is-fake-news\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#what-exactly-is-fake-news\",\n        \"aria-label\": \"what exactly is fake news permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`What exactly is fake news?`}</h2>\n    <p>{`Fake news is pieces of misinformation that are often incorporated to mislead people. Fake news is easy to spread as it carries no verification evidence.  This is often done to further or impose certain ideas and is often achieved with political agendas.`}</p>\n    <h2 {...{\n      \"id\": \"how-do-we-plan-to-solve-it\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h2\" {...{\n        \"href\": \"#how-do-we-plan-to-solve-it\",\n        \"aria-label\": \"how do we plan to solve it permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`How do we plan to solve it?`}</h2>\n    <p>{`This project is broken down into 5 steps, namely:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Loading the data`}</li>\n      <li parentName=\"ol\">{`Format the data`}</li>\n      <li parentName=\"ol\">{`Tokenize the data`}</li>\n      <li parentName=\"ol\">{`Build our model `}</li>\n      <li parentName=\"ol\">{`Train multiple models`}</li>\n    </ol>\n    <p>{`Let us get started on detecting the fake news!`}</p>\n    <h3 {...{\n      \"id\": \"loading-the-data\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#loading-the-data\",\n        \"aria-label\": \"loading the data permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Loading the Data`}</h3>\n    <p>{`I have used the “Fake or Real News Dataset” from Kaggle. < link here>.\nThe dataset comprises 2 csv files, namely fake and true. Both the files are available on kaggle for download. `}</p>\n    <br />\n    <CopyBlock language={\"python\"} text={` df_fake = pd.read_csv('Fake.csv')\ndf_true = pd.read_csv('True.csv') `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`The initial step would be to merge both the files to have one single file for both train and testing. However, before merging we need to add labels to it. We consider 1 for True and 0 for False. We introduce a new column called ‘class’.`}</p>\n    <br />\n    <CopyBlock language={\"python\"} text={`df_fake['class'] = 0\ndf_true['class'] = 1  `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`After doing that, we simply merge both the files.`}</p>\n    <br />\n    <CopyBlock language={\"python\"} text={`df_merge = pd.concat([df_fake, df_true], axis =0 ) `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <h3 {...{\n      \"id\": \"format-the-data\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#format-the-data\",\n        \"aria-label\": \"format the data permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Format the data`}</h3>\n    <p>{`Data preprocessing is a vital step to build a good model. Let us see the columns we have : `}</p>\n    <br />\n    <CopyBlock language={\"python\"} text={`df_merge.columns `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`For simplicity, we remove the columns “title”, “subject”,“date” and retain the text and class column for further processing.`}</p>\n    <CopyBlock language={\"python\"} text={`df = df_merge.drop([\"title\", \"subject\",\"date\"], axis = 1) `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Next we check for any null values,`}</p>\n    <CopyBlock language={\"python\"} text={`df.isnull().sum() `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Great, we have no null values. Now let us replace the index column and have a cleaner dataset.`}</p>\n    <CopyBlock language={\"python\"} text={`df.reset_index(inplace = True)\ndf.drop([\"index\"], axis = 1, inplace = True)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`I have defined a function wordopt below that performs basic regex operations on the text columns and modifies text on the following parameters:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Removes URLs and website links.`}</li>\n      <li parentName=\"ol\">{`Removes unwanted spacings.`}</li>\n      <li parentName=\"ol\">{`Replaces punctuations with a single space.`}</li>\n      <li parentName=\"ol\">{`Removes line spacings.`}</li>\n      <li parentName=\"ol\">{`Converts words in its lowercase.`}</li>\n    </ol>\n    <CopyBlock language={\"python\"} text={`def wordopt(text):\n    text = text.lower()\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub(\"\\\\W\",\" \",text) \n    text = re.sub('https?://\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    text = re.sub('\\\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)    \n    return text `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`This function is then applied to our text column, `}</p>\n    <CopyBlock language={\"python\"} text={`df[\"text\"] = df[\"text\"].apply(wordopt)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Before performing tokenization, we have one final step to do. Split the dataset into test and train. We consider having a 70 - 30 split.`}</p>\n    <CopyBlock language={\"python\"} text={`x = df['text']\ny = df['class']\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3) `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <h3 {...{\n      \"id\": \"tokenize-the-data\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#tokenize-the-data\",\n        \"aria-label\": \"tokenize the data permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Tokenize the data`}</h3>\n    <p>{`We use TF IDF to convert the text input into vectors. The explanation of TF IDF is out of scope for this blog, however, you may refer to get a deeper understanding. We use sklearn library to perform the steps.`}</p>\n    <CopyBlock language={\"python\"} text={`from sklearn.feature_extraction.text import TfidfVectorizer\n \nvectorization = TfidfVectorizer()\nxv_train = vectorization.fit_transform(x_train)\nxv_test = vectorization.transform(x_test) `} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Now, that we have the tokenized data, let’s build our first model.`}</p>\n    <h3 {...{\n      \"id\": \"building-the-model\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h3\" {...{\n        \"href\": \"#building-the-model\",\n        \"aria-label\": \"building the model permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`Building the Model`}</h3>\n    <p>{`We plan to build 4 different models and then compare them to choose the best one.`}</p>\n    <h4 {...{\n      \"id\": \"1-logistic-regression\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#1-logistic-regression\",\n        \"aria-label\": \"1 logistic regression permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`1. Logistic Regression`}</h4>\n    <CopyBlock language={\"python\"} text={`from sklearn.linear_model import LogisticRegression\n \nLR = LogisticRegression()\nLR.fit(xv_train,y_train)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Currently, we use the predefined model parameters. `}</p>\n    <CopyBlock language={\"python\"} text={`pred_lr=LR.predict(xv_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Further on, we now try to find the score.`}</p>\n    <CopyBlock language={\"python\"} text={`LR.score(xv_test, y_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Lastly, let us take a look at the classification report:`}</p>\n    <CopyBlock language={\"python\"} text={`print(classification_report(y_test,pred_lr))`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <h4 {...{\n      \"id\": \"2-decision-tree\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#2-decision-tree\",\n        \"aria-label\": \"2 decision tree permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`2. Decision Tree`}</h4>\n    <p>{`Performing similar modeling steps as above,`}</p>\n    <CopyBlock language={\"python\"} text={`from sklearn.tree import DecisionTreeClassifier\n \nDT = DecisionTreeClassifier()\nDT.fit(xv_train, y_train)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <CopyBlock language={\"python\"} text={`pred_dt = DT.predict(xv_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n \n    <br />\n    <CopyBlock language={\"python\"} text={`DT.score(xv_test, y_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`We already see a slight improvement over Random Forest. The classification report of Decision tree is shown below:`}</p>\n    <CopyBlock language={\"python\"} text={`print(classification_report(y_test, pred_dt))`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <h4 {...{\n      \"id\": \"3-gradient-boosting-classifier\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#3-gradient-boosting-classifier\",\n        \"aria-label\": \"3 gradient boosting classifier permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`3. Gradient boosting classifier`}</h4>\n    <br />\n    <CopyBlock language={\"python\"} text={`from sklearn.ensemble import GradientBoostingClassifier\n \nGBC = GradientBoostingClassifier(random_state=0)\nGBC.fit(xv_train, y_train)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <CopyBlock language={\"python\"} text={`pred_gbc = GBC.predict(xv_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <CopyBlock language={\"python\"} text={`GBC.score(xv_test, y_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`The score of the gradient boosting classifier is similar to that of the decision tree. Let us look at the classification report to find more:`}</p>\n    <CopyBlock language={\"python\"} text={`print(classification_report(y_test, pred_gbc))`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n \n    <br />\n    <h4 {...{\n      \"id\": \"4-random-forest\",\n      \"style\": {\n        \"position\": \"relative\"\n      }\n    }}><a parentName=\"h4\" {...{\n        \"href\": \"#4-random-forest\",\n        \"aria-label\": \"4 random forest permalink\",\n        \"className\": \"anchor before\"\n      }}><svg parentName=\"a\" {...{\n          \"aria-hidden\": \"true\",\n          \"focusable\": \"false\",\n          \"height\": \"16\",\n          \"version\": \"1.1\",\n          \"viewBox\": \"0 0 16 16\",\n          \"width\": \"16\"\n        }}><path parentName=\"svg\" {...{\n            \"fillRule\": \"evenodd\",\n            \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n          }}></path></svg></a>{`4. Random Forest`}</h4>\n    <br />\n    <CopyBlock language={\"python\"} text={`from sklearn.ensemble import RandomForestClassifier\n \nRFC = RandomForestClassifier(random_state=0)\nRFC.fit(xv_train, y_train)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <CopyBlock language={\"python\"} text={`pred_rfc = RFC.predict(xv_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <br />\n    <CopyBlock language={\"python\"} text={`RFC.score(xv_test, y_test)`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`As noticed, Random forest outperforms all the above models. Checking the classification report below:`}</p>\n    <CopyBlock language={\"python\"} text={`print(classification_report(y_test, pred_rfc))`} showLineNumbers={false} theme={dracula} wrapLines={true} codeBlock mdxType=\"CopyBlock\" />\n    <p>{`Now that we have trained different models, we can use them for evaluation on unseen or new data. You can find the complete code on the notebook here: `}</p>\n    <p>{`Please note the models can be further improved by changing their hyperparameters. You can also experiment with considering both the titles and text for detecting fake news. The possibilities are endless. `}</p>\n    <p>{`I hope this notebook was of help. Do let me know if you have any questions or used different methods to train your model. `}</p>\n    <p>{`the `}<a parentName=\"p\" {...{\n        \"href\": \"http://p.amxe.net/yh7n10br--ek1b5bf7-xrn\"\n      }}>{`repository`}</a>{` `}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}