import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useEffect, createElement } from 'react';
import { useThree } from 'react-three-fiber';
import useEffectfulState from '../helpers/useEffectfulState.js';
import { PointerLockControls as PointerLockControls$1 } from 'three/examples/jsm/controls/PointerLockControls';

const PointerLockControls = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    selector
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["selector"]);

  const {
    camera,
    gl,
    invalidate
  } = useThree();
  const controls = useEffectfulState(() => new PointerLockControls$1(camera, gl.domElement), [camera, gl.domElement], ref);
  useEffect(() => {
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', invalidate);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', invalidate);
  }, [controls, invalidate]);
  useEffect(() => {
    const handler = () => controls == null ? void 0 : controls.lock();

    const element = selector ? document.querySelector(selector) : document;
    element && element.addEventListener('click', handler);
    return () => element ? element.removeEventListener('click', handler) : undefined;
  }, [controls, selector]);
  return controls ? /*#__PURE__*/createElement("primitive", _extends({
    dispose: undefined,
    object: controls
  }, props)) : null;
});

export { PointerLockControls };
