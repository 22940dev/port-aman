import { ShaderMaterial, Vector2, Uniform, NoBlending } from 'three';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';

class ConvolutionMaterial extends ShaderMaterial {
  constructor(texelSize = new Vector2()) {
    super({
      uniforms: {
        inputBuffer: new Uniform(null),
        texelSize: new Uniform(new Vector2()),
        halfTexelSize: new Uniform(new Vector2()),
        kernel: new Uniform(0.0),
        scale: new Uniform(1.0)
      },
      fragmentShader: "#include <common>\n        #include <dithering_pars_fragment>      \n        uniform sampler2D inputBuffer;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n        void main() {\n          vec4 sum = texture2D(inputBuffer, vUv0);\n          sum += texture2D(inputBuffer, vUv1);\n          sum += texture2D(inputBuffer, vUv2);\n          sum += texture2D(inputBuffer, vUv3);\n          gl_FragColor = sum * 0.25;\n          #include <dithering_fragment>\n        }",
      vertexShader: "uniform vec2 texelSize;\n        uniform vec2 halfTexelSize;\n        uniform float kernel;\n        uniform float scale;\n        varying vec2 vUv0;\n        varying vec2 vUv1;\n        varying vec2 vUv2;\n        varying vec2 vUv3;\n        void main() {\n          vec2 uv = position.xy * 0.5 + 0.5;\n          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;\n          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);\n          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);\n          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);\n          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);\n          gl_Position = vec4(position.xy, 1.0, 1.0);\n        }",
      blending: NoBlending,
      depthWrite: false,
      depthTest: false
    });

    _defineProperty(this, "kernel", void 0);

    this.toneMapped = false;
    this.setTexelSize(texelSize.x, texelSize.y);
    this.kernel = new Float32Array([0.0, 1.0, 2.0, 2.0, 3.0]);
  }

  setTexelSize(x, y) {
    this.uniforms.texelSize.value.set(x, y);
    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);
  }

}

export { ConvolutionMaterial };
