import 'blob-polyfill';
import '../helpers/base64.js';
import '../assets/cloud.base64.js';
import _extends from '@babel/runtime/helpers/esm/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import { forwardRef, useState, useRef, useEffect, useMemo, useLayoutEffect, createElement } from 'react';
import { useThree, useFrame } from 'react-three-fiber';
import { k as useProgress } from '../useNormalTexture-39fc8195.js';
export { B as Billboard, W as Box, o as Center, X as Circle, C as Cloud, Y as Cone, V as ContactShadows, G as CurveModifier, Z as Cylinder, D as Detailed, c as DeviceOrientationControls, a8 as Dodecahedron, a as Effects, E as Environment, a9 as Extrude, F as FlyControls, a6 as Icosahedron, aa as Lathe, L as Line, M as MapControls, H as MeshDistortMaterial, I as MeshWobbleMaterial, a7 as Octahedron, d as OrbitControls, O as OrthographicCamera, ab as Parametric, b as PerspectiveCamera, $ as Plane, g as PointerLockControls, a5 as Polyhedron, P as PositionalAudio, p as Preload, R as Reflector, a4 as Ring, ac as RoundedBox, ad as ScreenQuad, S as Shadow, N as Sky, _ as Sphere, U as Stars, n as Stats, a3 as Tetrahedron, T as Text, a1 as Torus, a2 as TorusKnot, e as TrackballControls, f as TransformControls, a0 as Tube, K as calcPosFromAngles, i as isWebGL2Available, m as meshBounds, J as shaderMaterial, Q as softShadows, w as useAnimations, q as useAspect, r as useCamera, v as useContextBridge, u as useCubeTexture, s as useDetectGPU, A as useEdgeSplit, x as useFBO, h as useFBX, j as useGLTF, t as useHelper, ae as useMatcapTexture, af as useNormalTexture, k as useProgress, y as useSimplification, z as useTessellation, l as useTexture } from '../useNormalTexture-39fc8195.js';
import 'react-merge-refs';
import { Vector3, PerspectiveCamera, OrthographicCamera } from 'three';
import 'three/examples/jsm/lines/LineGeometry';
import 'three/examples/jsm/lines/LineMaterial';
import 'three/examples/jsm/lines/Line2';
import 'troika-three-text';
import 'three/examples/jsm/loaders/RGBELoader';
import 'use-asset';
import '../helpers/environment-assets.js';
import 'three/examples/jsm/postprocessing/EffectComposer';
import 'three/examples/jsm/postprocessing/RenderPass';
import 'three/examples/jsm/postprocessing/ShaderPass';
import 'three/examples/jsm/shaders/GammaCorrectionShader';
import 'three/examples/jsm/controls/DeviceOrientationControls';
import 'three/examples/jsm/controls/FlyControls';
import 'three/examples/jsm/controls/OrbitControls';
import 'three/examples/jsm/controls/TrackballControls';
import 'three/examples/jsm/controls/TransformControls';
import 'lodash.pick';
import 'lodash.omit';
import 'three/examples/jsm/controls/PointerLockControls';
import 'three/examples/jsm/loaders/FBXLoader';
import 'three/examples/jsm/loaders/GLTFLoader';
import 'three/examples/jsm/loaders/DRACOLoader';
import 'three/examples/jsm/libs/meshopt_decoder.module.js';
import 'zustand';
import '@babel/runtime/helpers/esm/defineProperty';
export { B as BlurPass, M as MeshReflectorMaterial } from '../MeshReflectorMaterial-f302adf4.js';
import 'three/examples/js/libs/stats.min';
import 'detect-gpu';
import 'three/examples/jsm/modifiers/SimplifyModifier';
import 'three/examples/jsm/modifiers/TessellateModifier';
import 'three/examples/jsm/modifiers/EdgeSplitModifier';
import 'three/examples/jsm/modifiers/CurveModifier';
import 'three/examples/jsm/objects/Sky';
import 'three/examples/jsm/shaders/HorizontalBlurShader';
import 'three/examples/jsm/shaders/VerticalBlurShader';
import '../helpers/matcap-assets.js';
import '../helpers/normal-assets.js';
import { unmountComponentAtNode, render } from 'react-dom';
import { useTransition, a } from '@react-spring/web';

const v1 = new Vector3();
const v2 = new Vector3();
const v3 = new Vector3();

function calculatePosition(el, camera, size) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  objectPos.project(camera);
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}

function isObjectBehindCamera(el, camera) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  const deltaCamObj = objectPos.sub(cameraPos);
  const camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}

function objectScale(el, camera) {
  if (camera instanceof PerspectiveCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const vFOV = camera.fov * Math.PI / 180;
    const dist = objectPos.distanceTo(cameraPos);
    return 1 / (2 * Math.tan(vFOV / 2) * dist);
  }

  if (camera instanceof OrthographicCamera) return camera.zoom;
  return 1;
}

function objectZIndex(el, camera, zIndexRange) {
  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const dist = objectPos.distanceTo(cameraPos);
    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    const B = zIndexRange[1] - A * camera.far;
    return Math.round(A * dist + B);
  }

  return undefined;
}

const Html = /*#__PURE__*/forwardRef((_ref, ref) => {
  var _portal$current;

  let {
    children,
    eps = 0.001,
    style,
    className,
    prepend,
    center,
    fullscreen,
    portal,
    scaleFactor,
    zIndexRange = [16777271, 0]
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["children", "eps", "style", "className", "prepend", "center", "fullscreen", "portal", "scaleFactor", "zIndexRange"]);

  const {
    gl,
    scene,
    camera,
    size
  } = useThree();
  const [el] = useState(() => document.createElement('div'));
  const group = useRef(null);
  const old = useRef([0, 0]);
  const target = (_portal$current = portal == null ? void 0 : portal.current) != null ? _portal$current : gl.domElement.parentNode;
  useEffect(() => {
    if (group.current) {
      scene.updateMatrixWorld();
      const vec = calculatePosition(group.current, camera, size);
      el.style.cssText = "position:absolute;top:0;left:0;transform:translate3d(" + vec[0] + "px," + vec[1] + "px,0);transform-origin:0 0;";

      if (target) {
        if (prepend) target.prepend(el);else target.appendChild(el);
      }

      return () => {
        if (target) target.removeChild(el);
        unmountComponentAtNode(el);
      };
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [target]);
  const styles = useMemo(() => _extends({
    position: 'absolute',
    transform: center ? 'translate3d(-50%,-50%,0)' : 'none'
  }, fullscreen && {
    top: -size.height / 2,
    left: -size.width / 2,
    width: size.width,
    height: size.height
  }, style), [style, center, fullscreen, size]);
  useLayoutEffect(() => void render( /*#__PURE__*/createElement("div", {
    ref: ref,
    style: styles,
    className: className,
    children: children
  }), el));
  useFrame(() => {
    if (group.current) {
      camera.updateMatrixWorld();
      const vec = calculatePosition(group.current, camera, size);

      if (Math.abs(old.current[0] - vec[0]) > eps || Math.abs(old.current[1] - vec[1]) > eps) {
        el.style.display = !isObjectBehindCamera(group.current, camera) ? 'block' : 'none';
        const scale = scaleFactor === undefined ? 1 : objectScale(group.current, camera) * scaleFactor;
        el.style.transform = "translate3d(" + vec[0] + "px," + vec[1] + "px,0) scale(" + scale + ")";
        el.style.zIndex = "" + objectZIndex(group.current, camera, zIndexRange);
      }

      old.current = vec;
    }
  });
  return /*#__PURE__*/createElement("group", _extends({}, props, {
    ref: group
  }));
});

const styles = {
  container: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    background: '#171717',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 1000
  },
  inner: {
    width: 100,
    height: 3,
    background: '#272727',
    textAlign: 'center'
  },
  bar: {
    height: 3,
    width: '100%',
    background: 'white',
    transformOrigin: 'left center'
  },
  data: {
    display: 'inline-block',
    position: 'relative',
    fontVariantNumeric: 'tabular-nums',
    marginTop: '0.8em',
    color: '#f0f0f0',
    fontSize: '0.6em',
    fontFamily: "-apple-system, BlinkMacSystemFont, \"Inter\", \"Segoe UI\", \"Helvetica Neue\", Helvetica, Arial, Roboto, Ubuntu, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"",
    whiteSpace: 'nowrap'
  }
};
function Loader({
  containerStyles,
  innerStyles,
  barStyles,
  dataStyles,
  dataInterpolation = p => "Loading " + (p * 100).toFixed(2) + "%",
  initialState = active => active
}) {
  const {
    active,
    progress
  } = useProgress();
  const transition = useTransition(initialState(active), {
    from: {
      opacity: 1,
      progress: 0
    },
    leave: {
      opacity: 0
    },
    update: {
      progress: progress / 100
    }
  });
  return transition(({
    progress,
    opacity
  }, active) => active && /*#__PURE__*/createElement(a.div, {
    style: _extends({}, styles.container, {
      opacity
    }, containerStyles)
  }, /*#__PURE__*/createElement("div", null, /*#__PURE__*/createElement("div", {
    style: _extends({}, styles.inner, innerStyles)
  }, /*#__PURE__*/createElement(a.div, {
    style: _extends({}, styles.bar, {
      scaleX: progress
    }, barStyles)
  }), /*#__PURE__*/createElement(a.span, {
    style: _extends({}, styles.data, dataStyles)
  }, progress.to(dataInterpolation))))));
}

export { Html, Loader };
