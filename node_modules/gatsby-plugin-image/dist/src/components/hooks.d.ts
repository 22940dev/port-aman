import { CSSProperties, HTMLAttributes, ImgHTMLAttributes, SetStateAction, Dispatch, RefObject } from "react";
import { Node } from "gatsby";
import { PlaceholderProps } from "./placeholder";
import { MainImageProps } from "./main-image";
import type { IGatsbyImageData } from "./gatsby-image.browser";
import { IGatsbyImageHelperArgs, Layout } from "../image-utils";
export declare const hasNativeLazyLoadSupport: () => boolean;
export declare function storeImageloaded(cacheKey?: string): void;
export declare function hasImageLoaded(cacheKey: string): boolean;
export declare type FileNode = Node & {
    childImageSharp?: Node & {
        gatsbyImageData?: IGatsbyImageData;
    };
};
export declare const getImage: (file: FileNode) => IGatsbyImageData | undefined;
export declare const getSrc: (file: FileNode) => string | undefined;
export declare function getWrapperProps(width: number, height: number, layout: Layout): Pick<HTMLAttributes<HTMLElement>, "className" | "style"> & {
    "data-gatsby-image-wrapper": string;
};
export declare function applyPolyfill(ref: RefObject<HTMLImageElement>): Promise<void>;
export declare function useGatsbyImage({ pluginName, breakpoints, ...args }: IGatsbyImageHelperArgs): IGatsbyImageData;
export declare function getMainProps(isLoading: boolean, isLoaded: boolean, images: any, loading?: "eager" | "lazy", toggleLoaded?: (loaded: boolean) => void, cacheKey?: string, ref?: RefObject<HTMLImageElement>, style?: CSSProperties): MainImageProps;
export declare type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> & Pick<PlaceholderProps, "sources" | "fallback"> & {
    "data-placeholder-image"?: string;
};
export declare function getPlaceholderProps(placeholder: PlaceholderImageAttrs | undefined, isLoaded: boolean, layout: Layout, width?: number, height?: number, backgroundColor?: string): PlaceholderImageAttrs;
export declare function useImageLoaded(cacheKey: string, loading: "lazy" | "eager", ref: any): {
    isLoaded: boolean;
    isLoading: boolean;
    toggleLoaded: Dispatch<SetStateAction<boolean>>;
};
export interface IArtDirectedImage {
    media: string;
    image: IGatsbyImageData;
}
/**
 * Generate a Gatsby image data object with multiple, art-directed images that display at different
 * resolutions.
 *
 * @param defaultImage The image displayed when no media query matches.
 * It is also used for all other settings applied to the image, such as width, height and layout.
 * You should pass a className to the component with media queries to adjust the size of the container,
 * as this cannot be adjusted automatically.
 * @param artDirected Array of objects which each contains a `media` string which is a media query
 * such as `(min-width: 320px)`, and the image object to use when that query matches.
 */
export declare function useArtDirection(defaultImage: IGatsbyImageData, artDirected: Array<IArtDirectedImage>): IGatsbyImageData;
//# sourceMappingURL=hooks.d.ts.map