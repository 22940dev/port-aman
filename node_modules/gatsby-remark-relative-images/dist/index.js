"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fmImagesToRelative = void 0;
const path_1 = __importDefault(require("path"));
const unist_util_select_1 = require("unist-util-select");
const lodash_1 = require("lodash");
const cheerio_1 = __importDefault(require("cheerio"));
const traverse_1 = __importDefault(require("traverse"));
const utils_1 = require("./utils");
const defaultPluginOptions = {
    staticFolderName: 'static',
};
const defaultFrontmatterOptions = {
    staticFolderName: 'static',
    include: [],
    exclude: [],
};
const findMatchingNode = (url, files, staticFolderName) => {
    const result = lodash_1.find(files, (file) => {
        const staticPath = utils_1.slash(path_1.default.join(staticFolderName, url));
        return utils_1.slash(path_1.default.normalize(file.absolutePath)).endsWith(staticPath);
    });
    if (!result) {
        throw new Error(`No matching file found for src "${url}" in static folder "${staticFolderName}". Please check static folder name and that file exists at "${staticFolderName}${url}". This error will probably cause a "GraphQLDocumentError" later in build. All converted field paths MUST resolve to a matching file in the "static" folder.`);
    }
    return result;
};
const plugin = ({ files, markdownNode, markdownAST, getNode }, pluginOptions) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    // Default options
    const options = lodash_1.defaults(pluginOptions, defaultPluginOptions);
    // Get the markdown file's parent directory
    const parentDirectory = (_b = (_a = getNode(markdownNode.parent)) === null || _a === void 0 ? void 0 : _a.dir) !== null && _b !== void 0 ? _b : '';
    // Process all markdown image nodes
    unist_util_select_1.selectAll('image', markdownAST).forEach((_node) => {
        const node = _node;
        if (!node.url)
            return;
        if (!path_1.default.isAbsolute(node.url))
            return;
        const imageNode = findMatchingNode(node.url, files, options.staticFolderName);
        // Update node.url to be relative to its parent file
        node.url = path_1.default.relative(parentDirectory, imageNode.absolutePath);
    });
    // Process all HTML images in markdown body
    unist_util_select_1.selectAll('html', markdownAST).forEach((_node) => {
        const node = _node;
        const $ = cheerio_1.default.load(node.value);
        if ($(`img`).length === 0)
            return;
        $(`img`).each((_, element) => {
            var _a;
            // Get the details we need.
            const url = $(element).attr(`src`);
            // Only handle absolute (local) urls
            if (!url || !path_1.default.isAbsolute(url))
                return;
            const imageNode = findMatchingNode(url, files, options.staticFolderName);
            // Make the image src relative to its parent node
            const src = path_1.default.relative(parentDirectory, imageNode.absolutePath);
            $(element).attr('src', src);
            node.value = (_a = $(`body`).html()) !== null && _a !== void 0 ? _a : ''; // fix for cheerio v1
        });
    });
});
const fmImagesToRelative = (node, getNodes, _options) => {
    const options = lodash_1.defaults(_options, defaultFrontmatterOptions);
    const files = getNodes().filter((n) => n.absolutePath);
    // Only process markdown files
    if (node.internal.type === `MarkdownRemark` || node.internal.type === `Mdx`) {
        // Deeply iterate through frontmatter data for absolute paths
        traverse_1.default(node.frontmatter).forEach(function (value) {
            if (!lodash_1.isString(value))
                return;
            if (!path_1.default.isAbsolute(value))
                return;
            const paths = this.path.reduce((acc, current) => {
                acc.push(acc.length > 0 ? [acc, current].join('.') : current);
                return acc;
            }, []);
            let shouldTransform = options.include.length < 1;
            if (options.include.some((a) => paths.includes(a))) {
                shouldTransform = true;
            }
            if (options.exclude.some((a) => paths.includes(a))) {
                shouldTransform = false;
            }
            if (!shouldTransform)
                return;
            const imageNode = findMatchingNode(value, files, options.staticFolderName);
            const newValue = path_1.default.relative(path_1.default.join(node.fileAbsolutePath, '..'), imageNode.absolutePath);
            this.update(newValue);
        });
    }
};
exports.fmImagesToRelative = fmImagesToRelative;
exports.default = plugin;
