{"version":3,"sources":["webpack:///./node_modules/refractor/lang/kotlin.js"],"names":["kotlin","Prism","languages","extend","keyword","pattern","lookbehind","function","number","operator","insertBefore","alias","annotation","label","interpolation","inside","delimiter","rest","module","exports","displayName","aliases"],"mappings":"4FAMA,SAASA,EAAOC,IAGd,SAAWA,GACTA,EAAMC,UAAUF,OAASC,EAAMC,UAAUC,OAAO,QAAS,CACvDC,QAAS,CAEPC,QAAS,2bACTC,YAAY,GAEdC,SAAU,CAAC,eAAgB,CACzBF,QAAS,mBACTC,YAAY,IAEdE,OAAQ,kIACRC,SAAU,gHAELR,EAAMC,UAAUF,OAAO,cAC9BC,EAAMC,UAAUQ,aAAa,SAAU,SAAU,CAC/C,aAAc,CACZL,QAAS,sBACTM,MAAO,YAIXV,EAAMC,UAAUQ,aAAa,SAAU,UAAW,CAChDE,WAAY,CACVP,QAAS,sCACTM,MAAO,aAGXV,EAAMC,UAAUQ,aAAa,SAAU,WAAY,CACjDG,MAAO,CACLR,QAAS,YACTM,MAAO,YAGX,IAAIG,EAAgB,CAAC,CACnBT,QAAS,cACTU,OAAQ,CACNC,UAAW,CACTX,QAAS,YACTM,MAAO,YAETM,KAAMhB,EAAMC,UAAUF,SAEvB,CACDK,QAAS,QACTM,MAAO,aAETV,EAAMC,UAAUF,OAAe,OAAEe,OAASd,EAAMC,UAAUF,OAAO,cAAce,OAAS,CACtFD,cAAeA,GAhDnB,CAkDGb,GAzDLiB,EAAOC,QAAUnB,EACjBA,EAAOoB,YAAc,SACrBpB,EAAOqB,QAAU","file":"react-syntax-highlighter_languages_refractor_kotlin-769e4be238310f0184d8.js","sourcesContent":["'use strict';\n\nmodule.exports = kotlin;\nkotlin.displayName = 'kotlin';\nkotlin.aliases = [];\n\nfunction kotlin(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.kotlin = Prism.languages.extend('clike', {\n      keyword: {\n        // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get\n        pattern: /(^|[^.])\\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\\b/,\n        lookbehind: true\n      },\n      function: [/\\w+(?=\\s*\\()/, {\n        pattern: /(\\.)\\w+(?=\\s*\\{)/,\n        lookbehind: true\n      }],\n      number: /\\b(?:0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\\d+(?:_\\d+)*(?:\\.\\d+(?:_\\d+)*)?(?:[eE][+-]?\\d+(?:_\\d+)*)?[fFL]?)\\b/,\n      operator: /\\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\\/*%<>]=?|[?:]:?|\\.\\.|&&|\\|\\||\\b(?:and|inv|or|shl|shr|ushr|xor)\\b/\n    });\n    delete Prism.languages.kotlin['class-name'];\n    Prism.languages.insertBefore('kotlin', 'string', {\n      'raw-string': {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1/,\n        alias: 'string' // See interpolation below\n\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'keyword', {\n      annotation: {\n        pattern: /\\B@(?:\\w+:)?(?:[A-Z]\\w*|\\[[^\\]]+\\])/,\n        alias: 'builtin'\n      }\n    });\n    Prism.languages.insertBefore('kotlin', 'function', {\n      label: {\n        pattern: /\\w+@|@\\w+/,\n        alias: 'symbol'\n      }\n    });\n    var interpolation = [{\n      pattern: /\\$\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^\\$\\{|\\}$/,\n          alias: 'variable'\n        },\n        rest: Prism.languages.kotlin\n      }\n    }, {\n      pattern: /\\$\\w+/,\n      alias: 'variable'\n    }];\n    Prism.languages.kotlin['string'].inside = Prism.languages.kotlin['raw-string'].inside = {\n      interpolation: interpolation\n    };\n  })(Prism);\n}"],"sourceRoot":""}