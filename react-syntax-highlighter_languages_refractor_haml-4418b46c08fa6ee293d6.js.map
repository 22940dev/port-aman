{"version":3,"sources":["webpack:///./node_modules/refractor/lang/haml.js"],"names":["haml","Prism","languages","pattern","lookbehind","alias","inside","rest","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore","module","exports","displayName","aliases"],"mappings":"4FAMA,SAASA,EAAKC,IASZ,SAAWA,GACTA,EAAMC,UAAUF,KAAO,CAErB,oBAAqB,CACnBG,QAAS,iEACTC,YAAY,EACZC,MAAO,WAET,iBAAkB,CAAC,CACjBF,QAAS,+GACTC,YAAY,EACZE,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,OAEvB,CACDL,QAAS,uFACTC,YAAY,EACZE,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,QAI1BC,OAAQ,CACNN,QAAS,kFACTC,YAAY,EACZE,OAAQ,CACN,cAAe,CACbH,QAAS,WACTE,MAAO,cAIbK,OAAQ,CACNP,QAAS,4BACTC,YAAY,EACZE,OAAQ,CACNC,KAAMN,EAAMC,UAAUQ,SAG1BC,QAAS,CACPR,QAAS,oCACTC,YAAY,GAEdQ,IAAK,CAEHT,QAAS,qGACTC,YAAY,EACZE,OAAQ,CACNO,WAAY,CAAC,CAGXV,QAAS,kCACTC,YAAY,EACZE,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,OAEvB,CACDL,QAAS,YACTG,OAAQ,CACN,aAAc,CACZH,QAAS,0CACTC,YAAY,GAEd,YAAa,4BACbU,YAAa,WAEd,CACDX,QAAS,aACTG,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,QAG1BM,YAAa,SAGjBC,KAAM,CACJZ,QAAS,0CACTC,YAAY,EACZE,OAAQ,CACNC,KAAMN,EAAMC,UAAUM,OAI1BQ,cAAe,CACbb,QAAS,aACTG,OAAQ,CACNW,UAAW,CACTd,QAAS,WACTE,MAAO,eAETE,KAAMN,EAAMC,UAAUM,OAG1BM,YAAa,CACXX,QAAS,kCACTC,YAAY,IAWhB,IARA,IAEIc,EAAU,CAAC,MAAO,CACpBT,OAAQ,SACRU,SAAU,gBACT,MAAO,aAAc,OAAQ,WAAY,OAAQ,OAAQ,WACxDC,EAAc,GAETC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAIZ,EAASS,EAAQG,GACrBZ,EAA2B,iBAAXA,EAAsB,CACpCA,OAAQA,EACRU,SAAUV,GACRA,EAEAR,EAAMC,UAAUO,EAAOU,YACzBC,EAAY,UAAYX,EAAOA,QAAU,CACvCN,QAASqB,OAjBM,wGAiBgBC,QAAQ,kBAAmBhB,EAAOA,SACjEL,YAAY,EACZE,OAAQ,CACN,cAAe,CACbH,QAAS,WACTE,MAAO,YAETE,KAAMN,EAAMC,UAAUO,EAAOU,aAMrClB,EAAMC,UAAUwB,aAAa,OAAQ,SAAUN,GAhIjD,CAiIGnB,GA9IL0B,EAAOC,QAAU5B,EACjBA,EAAK6B,YAAc,OACnB7B,EAAK8B,QAAU","file":"react-syntax-highlighter_languages_refractor_haml-4418b46c08fa6ee293d6.js","sourcesContent":["'use strict';\n\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\n\nfunction haml(Prism) {\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */\n  ;\n\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n            lookbehind: true,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}"],"sourceRoot":""}