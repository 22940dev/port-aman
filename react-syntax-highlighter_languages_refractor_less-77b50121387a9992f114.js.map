{"version":3,"sources":["webpack:///./node_modules/refractor/lang/less.js"],"names":["less","Prism","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","alias","module","exports","displayName","aliases"],"mappings":"8FAMA,SAASA,EAAKC,GAQZA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,MAAO,CACnDC,QAAS,CAAC,mBAAoB,CAC5BC,QAAS,kBACTC,YAAY,IAEdC,OAAQ,CACNF,QAAS,8CACTG,OAAQ,CACNC,YAAa,UAIjBC,SAAU,CACRL,QAAS,yEACTG,OAAQ,CAENG,SAAU,aAGdC,SAAU,2CACVC,SAAU,aAEZZ,EAAMC,UAAUY,aAAa,OAAQ,WAAY,CAC/CH,SAAU,CACV,CACEN,QAAS,cACTG,OAAQ,CACNC,YAAa,MAGjB,aACA,cAAe,CACbJ,QAAS,uCACTC,YAAY,EACZS,MAAO,cA9CbC,EAAOC,QAAUjB,EACjBA,EAAKkB,YAAc,OACnBlB,EAAKmB,QAAU","file":"react-syntax-highlighter_languages_refractor_less-77b50121387a9992f114.js","sourcesContent":["'use strict';\n\nmodule.exports = less;\nless.displayName = 'less';\nless.aliases = [];\n\nfunction less(Prism) {\n  /* FIXME :\n  :extend() is not handled specifically : its highlighting is buggy.\n  Mixin usage must be inside a ruleset to be highlighted.\n  At-rules (e.g. import) containing interpolations are buggy.\n  Detached rulesets are highlighted as at-rules.\n  A comment before a mixin usage prevents the latter to be properly highlighted.\n  */\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^|[^\\\\])\\/\\/.*/,\n      lookbehind: true\n    }],\n    atrule: {\n      pattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n    operator: /[+\\-*\\/]/\n  });\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [// Variable declaration (the colon must be consumed!)\n    {\n      pattern: /@[\\w-]+\\s*:/,\n      inside: {\n        punctuation: /:/\n      }\n    }, // Variable usage\n    /@@?[\\w-]+/],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  });\n}"],"sourceRoot":""}