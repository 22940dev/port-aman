{"version":3,"sources":["webpack:///./node_modules/refractor/lang/sass.js"],"names":["sass","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector","module","exports","displayName","aliases"],"mappings":"6FAMA,SAASA,EAAKC,IAGZ,SAAWA,GACTA,EAAMC,UAAUF,KAAOC,EAAMC,UAAUC,OAAO,MAAO,CAEnDC,QAAS,CACPC,QAAS,iDACTC,YAAY,KAGhBL,EAAMC,UAAUK,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbF,QAAS,sBACTG,OAAQ,CACNC,OAAQ,+BAIPR,EAAMC,UAAUF,KAAKS,OAC5B,IAAIC,EAAW,yBACXC,EAAW,CAAC,2CAA4C,CAC1DN,QAAS,eACTC,YAAY,IAEdL,EAAMC,UAAUK,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfF,QAAS,eACTG,OAAQ,CACNI,YAAa,IACbF,SAAUA,EACVC,SAAUA,IAId,gBAAiB,CACfN,QAAS,sCACTG,OAAQ,CACNK,SAAU,CAAC,kBAAmB,CAC5BR,QAAS,aACTC,YAAY,IAEdM,YAAa,IACbF,SAAUA,EACVC,SAAUA,EACVG,UAAWb,EAAMC,UAAUF,KAAKc,qBAI/Bb,EAAMC,UAAUF,KAAKa,gBACrBZ,EAAMC,UAAUF,KAAKc,UAG5Bb,EAAMC,UAAUK,aAAa,OAAQ,cAAe,CAClDQ,SAAU,CACRV,QAAS,yEACTC,YAAY,KAxDlB,CA2DGL,GAlELe,EAAOC,QAAUjB,EACjBA,EAAKkB,YAAc,OACnBlB,EAAKmB,QAAU","file":"react-syntax-highlighter_languages_refractor_sass-5ab278a7f9e8207565e7.js","sourcesContent":["'use strict';\n\nmodule.exports = sass;\nsass.displayName = 'sass';\nsass.aliases = [];\n\nfunction sass(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n      pattern: /(\\s+)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    });\n  })(Prism);\n}"],"sourceRoot":""}