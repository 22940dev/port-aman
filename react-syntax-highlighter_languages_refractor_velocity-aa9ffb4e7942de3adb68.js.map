{"version":3,"sources":["webpack:///./node_modules/refractor/lang/velocity.js"],"names":["velocity","Prism","languages","extend","variable","pattern","lookbehind","inside","string","greedy","number","boolean","operator","punctuation","function","insertBefore","unparsed","alias","directive","keyword","rest","module","exports","displayName","aliases"],"mappings":"6FAMA,SAASA,EAASC,IAGhB,SAAWA,GACTA,EAAMC,UAAUF,SAAWC,EAAMC,UAAUC,OAAO,SAAU,IAC5D,IAAIH,EAAW,CACbI,SAAU,CACRC,QAAS,yGACTC,YAAY,EACZC,OAAQ,IAGVC,OAAQ,CACNH,QAAS,kBACTI,QAAQ,GAEVC,OAAQ,UACRC,QAAS,qBACTC,SAAU,iEACVC,YAAa,gBAEfb,EAASI,SAASG,OAAS,CACzBC,OAAQR,EAAiB,OACzBc,SAAU,CACRT,QAAS,4BACTC,YAAY,GAEdI,OAAQV,EAAiB,OACzBW,QAASX,EAAkB,QAC3Ba,YAAab,EAAsB,aAErCC,EAAMC,UAAUa,aAAa,WAAY,UAAW,CAClDC,SAAU,CACRX,QAAS,4BACTC,YAAY,EACZG,QAAQ,EACRF,OAAQ,CACNM,YAAa,gBAGjB,mBAAoB,CAAC,CACnBR,QAAS,0BACTC,YAAY,EACZG,QAAQ,EACRQ,MAAO,WACN,CACDZ,QAAS,gBACTC,YAAY,EACZG,QAAQ,EACRQ,MAAO,YAETC,UAAW,CACTb,QAAS,uFACTC,YAAY,EACZC,OAAQ,CACNY,QAAS,CACPd,QAAS,2CACTE,OAAQ,CACNM,YAAa,SAGjBO,KAAMpB,IAGVI,SAAUJ,EAAmB,WAE/BC,EAAMC,UAAUF,SAAc,IAAEO,OAAO,cAAcA,OAAOa,KAAOnB,EAAMC,UAAUF,SA/DrF,CAgEGC,GAvELoB,EAAOC,QAAUtB,EACjBA,EAASuB,YAAc,WACvBvB,EAASwB,QAAU","file":"react-syntax-highlighter_languages_refractor_velocity-aa9ffb4e7942de3adb68.js","sourcesContent":["'use strict';\n\nmodule.exports = velocity;\nvelocity.displayName = 'velocity';\nvelocity.aliases = [];\n\nfunction velocity(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.velocity = Prism.languages.extend('markup', {});\n    var velocity = {\n      variable: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)\\$!?(?:[a-z][\\w-]*(?:\\([^)]*\\))?(?:\\.[a-z][\\w-]*(?:\\([^)]*\\))?|\\[[^\\]]+])*|{[^}]+})/i,\n        lookbehind: true,\n        inside: {} // See below\n\n      },\n      string: {\n        pattern: /\"[^\"]*\"|'[^']*'/,\n        greedy: true\n      },\n      number: /\\b\\d+\\b/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: /[=!<>]=?|[+*/%-]|&&|\\|\\||\\.\\.|\\b(?:eq|g[et]|l[et]|n(?:e|ot))\\b/,\n      punctuation: /[(){}[\\]:,.]/\n    };\n    velocity.variable.inside = {\n      string: velocity['string'],\n      function: {\n        pattern: /([^\\w-])[a-z][\\w-]*(?=\\()/,\n        lookbehind: true\n      },\n      number: velocity['number'],\n      boolean: velocity['boolean'],\n      punctuation: velocity['punctuation']\n    };\n    Prism.languages.insertBefore('velocity', 'comment', {\n      unparsed: {\n        pattern: /(^|[^\\\\])#\\[\\[[\\s\\S]*?]]#/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          punctuation: /^#\\[\\[|]]#$/\n        }\n      },\n      'velocity-comment': [{\n        pattern: /(^|[^\\\\])#\\*[\\s\\S]*?\\*#/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      }, {\n        pattern: /(^|[^\\\\])##.*/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      }],\n      directive: {\n        pattern: /(^|[^\\\\](?:\\\\\\\\)*)#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})(?:\\s*\\((?:[^()]|\\([^()]*\\))*\\))?/i,\n        lookbehind: true,\n        inside: {\n          keyword: {\n            pattern: /^#@?(?:[a-z][\\w-]*|{[a-z][\\w-]*})|\\bin\\b/,\n            inside: {\n              punctuation: /[{}]/\n            }\n          },\n          rest: velocity\n        }\n      },\n      variable: velocity['variable']\n    });\n    Prism.languages.velocity['tag'].inside['attr-value'].inside.rest = Prism.languages.velocity;\n  })(Prism);\n}"],"sourceRoot":""}