{"version":3,"sources":["webpack:///./node_modules/refractor/lang/xquery.js"],"names":["xquery","Prism","languages","extend","pattern","greedy","alias","string","extension","variable","axis","lookbehind","keyword","function","builtin","number","operator","punctuation","tag","inside","rest","stringifyToken","token","content","map","join","hooks","add","env","language","walkTokens","tokens","openedTags","i","length","notTagNorBrace","type","tagName","pop","push","openedBraces","plainText","splice","test","Token","module","exports","displayName","aliases"],"mappings":"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","file":"react-syntax-highlighter_languages_refractor_xquery-356e028d0a85e136a121.js","sourcesContent":["'use strict';\n\nmodule.exports = xquery;\nxquery.displayName = 'xquery';\nxquery.aliases = [];\n\nfunction xquery(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[\\w-:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [/[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/, {\n        pattern: /(\\s)-(?=\\s)/,\n        lookbehind: true\n      }],\n      punctuation: /[[\\](){},;:/]/\n    });\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i;\n    Prism.languages.xquery['tag'].inside['attr-value'].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i;\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['punctuation'] = /^=\"|\"$/;\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n      inside: {\n        rest: Prism.languages.xquery\n      },\n      alias: 'language-xquery'\n    }; // The following will handle plain text inside tags\n\n    var stringifyToken = function stringifyToken(token) {\n      if (typeof token === 'string') {\n        return token;\n      }\n\n      if (typeof token.content === 'string') {\n        return token.content;\n      }\n\n      return token.content.map(stringifyToken).join('');\n    };\n\n    var walkTokens = function walkTokens(tokens) {\n      var openedTags = [];\n\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        var notTagNorBrace = false;\n\n        if (typeof token !== 'string') {\n          if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {\n                // Pop matching opening tag\n                openedTags.pop();\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {// Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                });\n              }\n            }\n          } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{' && ( // Ignore `{{`\n          !tokens[i + 1] || tokens[i + 1].type !== 'punctuation' || tokens[i + 1].content !== '{') && (!tokens[i - 1] || tokens[i - 1].type !== 'plain-text' || tokens[i - 1].content !== '{')) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++;\n          } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--;\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true;\n          }\n        }\n\n        if (notTagNorBrace || typeof token === 'string') {\n          if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token); // And merge text with adjacent text\n\n            if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {\n              plainText += stringifyToken(tokens[i + 1]);\n              tokens.splice(i + 1, 1);\n            }\n\n            if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText;\n              tokens.splice(i - 1, 1);\n              i--;\n            }\n\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText;\n            } else {\n              tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);\n            }\n          }\n        }\n\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content);\n        }\n      }\n    };\n\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'xquery') {\n        return;\n      }\n\n      walkTokens(env.tokens);\n    });\n  })(Prism);\n}"],"sourceRoot":""}